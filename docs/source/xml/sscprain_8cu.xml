<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="sscprain_8cu" kind="file" language="C++">
    <compoundname>sscprain.cu</compoundname>
    <includes refid="include_8h" local="yes">../inc/include.h</includes>
    <includes refid="logerror_8hpp" local="yes">../inc/common/logerror.hpp</includes>
    <incdepgraph>
      <node id="28">
        <label>../inc/common/logerror.hpp</label>
        <link refid="logerror_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>helper_cuda.h</label>
        <link refid="helper__cuda_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>helper_string.h</label>
        <link refid="helper__string_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../inc/include.h</label>
        <link refid="include_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>../inc/prain.h</label>
        <link refid="prain_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu</label>
        <link refid="sscprain_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>cassert</label>
      </node>
      <node id="25">
        <label>chrono</label>
      </node>
      <node id="5">
        <label>complex.h</label>
      </node>
      <node id="23">
        <label>cublas.h</label>
      </node>
      <node id="3">
        <label>cuda.h</label>
      </node>
      <node id="7">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="4">
        <label>cufft.h</label>
      </node>
      <node id="14">
        <label>fstream</label>
      </node>
      <node id="24">
        <label>future</label>
      </node>
      <node id="19">
        <label>iostream</label>
      </node>
      <node id="27">
        <label>omp.h</label>
      </node>
      <node id="22">
        <label>sstream</label>
      </node>
      <node id="10">
        <label>stdint.h</label>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
      <node id="11">
        <label>stdlib.h</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
      <node id="16">
        <label>strings.h</label>
      </node>
      <node id="6">
        <label>tgmath.h</label>
      </node>
      <node id="26">
        <label>thread</label>
      </node>
      <node id="17">
        <label>time.h</label>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="sscprain_8cu_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="18" column="5" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1a3d2d554269bd29eceed8475f94858b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CPUprain</definition>
        <argsstring>(float *projections, float _Complex *recovery, float _Complex *initialGuessN, float *compact, float *parameters, size_t *iterations, size_t *volumesize, int *devices, int ndev)</argsstring>
        <name>CPUprain</name>
        <param>
          <type>float *</type>
          <declname>projections</declname>
        </param>
        <param>
          <type>float _Complex *</type>
          <declname>recovery</declname>
        </param>
        <param>
          <type>float _Complex *</type>
          <declname>initialGuessN</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>compact</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>volumesize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>devices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndev</declname>
        </param>
        <briefdescription>
<para>Extern C function to recover the phase and attenuation of an image (reconstruction) given a data (sino) and an initial guess <emphasis>initialGuessN</emphasis> by Regularized Gauss-Newton Iterations together with a Conjugate Gradient method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>projections</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recovery</parametername>
</parameternamelist>
<parameterdescription>
<para>Image to be reconstructed. Starts with zeros. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialGuessN</parametername>
</parameternamelist>
<parameterdescription>
<para>Image initial guess. Starts with zeros. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compact</parametername>
</parameternamelist>
<parameterdescription>
<para>? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing {fresnel, fresnel, alpha, gamma, ratio, 1E-5, 1E-5}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the number of maximum Newton iterations, the number of maximum conjugate gradient iteration and the block size, respectively. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>volumesize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size-4 array containing the number of voxels that will be processed in x, y and z and the block size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devices</parametername>
</parameternamelist>
<parameterdescription>
<para>Array containing the range {0, 1, 2, ..., ndev - 1}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndev</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of devices (GPUs) that will be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="21" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="21" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1a983dc33b3b6bd82ebfc75619bce997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CPUprain</definition>
        <argsstring>(PAR param, PROF *prof, float *projections, float _Complex *recovery, float _Complex *initialGuessN, float *compact, int ndev)</argsstring>
        <name>_CPUprain</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>projections</declname>
        </param>
        <param>
          <type>float _Complex *</type>
          <declname>recovery</declname>
        </param>
        <param>
          <type>float _Complex *</type>
          <declname>initialGuessN</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>compact</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndev</declname>
        </param>
        <briefdescription>
<para>PRAIN call 3D: Solve 3D batches of 32 volumes at a time each batch is solved in parallel threads. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct containing parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prof</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct containing profile members. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>projections</parametername>
</parameternamelist>
<parameterdescription>
<para>An amount of the sample data that will be lauched by the thread running the current function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recovery</parametername>
</parameternamelist>
<parameterdescription>
<para>An amount of the image that will be lauched by the thread running the current function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialGuessN</parametername>
</parameternamelist>
<parameterdescription>
<para>An amount of the image initial guess that will be lauched by the thread running the current function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compact</parametername>
</parameternamelist>
<parameterdescription>
<para>? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndev</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the device that will be launched by the current CPU thread.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The size of <emphasis>projection</emphasis>, <emphasis>recovery</emphasis>, <emphasis>initialGuessN</emphasis> and <emphasis>compact</emphasis> is <emphasis>param.subvolume*</emphasis> <emphasis>param.slice</emphasis> for each one. It may be less than this amount if the data is not divisible by the number of devices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="90" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="90" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1a6b3de020266bb5542cc72fe36ba00ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void praincall</definition>
        <argsstring>(PAR param, PROF *prof, float *projections, float _Complex *recovery, float _Complex *initialGuessN, float *compact, int ndev)</argsstring>
        <name>praincall</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>projections</declname>
        </param>
        <param>
          <type>float _Complex *</type>
          <declname>recovery</declname>
        </param>
        <param>
          <type>float _Complex *</type>
          <declname>initialGuessN</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>compact</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndev</declname>
        </param>
        <briefdescription>
<para>Computes Newthon method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct containing parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prof</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct containing profile members. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>projections</parametername>
</parameternamelist>
<parameterdescription>
<para>An amount of the sample data that will be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recovery</parametername>
</parameternamelist>
<parameterdescription>
<para>An amount of the image that will be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialGuessN</parametername>
</parameternamelist>
<parameterdescription>
<para>An amount of the image initial guess that will be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compact</parametername>
</parameternamelist>
<parameterdescription>
<para>? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndev</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the device that will be launched by the current CPU thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="131" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="131" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1ac8a2c2f22654a6c456274b15688ad5db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixOperatorLaplace</definition>
        <argsstring>(PAR param, PRAINDAT *prain, PROF *prof)</argsstring>
        <name>MatrixOperatorLaplace</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref> *</type>
          <declname>prain</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <briefdescription>
<para>Computates the matrix <formula id="11">$M$</formula> of the linear system <formula id="5">$Mx = b$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="11">$M$</formula> applied in a vector <formula id="12">$p$</formula> is writting as <formula id="13">$Mp = A + B + C$</formula>, where:<itemizedlist>
<listitem><para><formula id="14">$A = F&apos;[f]^*(F&apos;[f]p) = 4\overline{e^{-f}} \mathcal{F}^*\left(\Re\left(\overline{\mathcal{F}(e^{-f})}\mathcal{F}(e^{-f}p)\right)\mathcal{F}(e^{-f})\right)$</formula>;</para>
</listitem><listitem><para><formula id="15">$B = \alpha \Delta p \qquad \text{or} \qquad B = \alpha p$</formula>;</para>
</listitem><listitem><para><formula id="16">$C = \gamma m^2 \Re(p)$</formula>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para><formula id="11">$M$</formula> is saved in <emphasis>prain.Mp</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with image parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prain</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with some data info that was or will be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prof</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for profile info. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="246" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="246" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1ae82c8ee6724dfdec21c49e45a71e3cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void computeRHSLaplace</definition>
        <argsstring>(PAR param, PRAINDAT *prain, PROF *prof)</argsstring>
        <name>computeRHSLaplace</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref> *</type>
          <declname>prain</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <briefdescription>
<para>Computate RHS of the linear system <formula id="5">$Mx = b$</formula> and it&apos;s norm. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="6">$b$</formula> is writting as <formula id="7">$b = A + B + C$</formula>, where:<itemizedlist>
<listitem><para><formula id="8">$A = F&apos;[f]^*(\text{intensity}) = -2\overline{e^{-f}} \mathcal{F}^*(\text{intensity}\times\mathcal{F}(e^{-f}))$</formula>;</para>
</listitem><listitem><para><formula id="9">$B = \alpha \Delta(f_0 - f) \qquad \text{or} \qquad \alpha(f_0 - f)$</formula>;</para>
</listitem><listitem><para><formula id="10">$C = \gamma m \min(0,\Re(f))$</formula>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para><formula id="6">$b$</formula> is saved in <emphasis>prain.ans</emphasis> and it&apos;s norm in <emphasis>prain.rhsnorm</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with image parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prain</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with some data info that was or will be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prof</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for profile info. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="277" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="277" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1a7da9ddffb985a367999f3789ae7e4eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void conjugateGradientLaplace</definition>
        <argsstring>(PAR param, PRAINDAT *prain, PROF *prof)</argsstring>
        <name>conjugateGradientLaplace</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref> *</type>
          <declname>prain</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <briefdescription>
<para>Solves the linear system <formula id="5">$Mx = b$</formula>, using conjugate gradient method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with image parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prain</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with some data info that was or will be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prof</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for profile info. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="308" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="308" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1abe3c86803c3f8cf810fb7a359aa5e0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixOperatorTik</definition>
        <argsstring>(PAR param, PRAINDAT *prain, PROF *prof)</argsstring>
        <name>MatrixOperatorTik</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref> *</type>
          <declname>prain</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <briefdescription>
<para>Computates the matrix <formula id="11">$M$</formula> of the linear system <formula id="5">$Mx = b$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="11">$M$</formula> applied in a vector <formula id="12">$p$</formula> is writting as <formula id="13">$Mp = A + B + C$</formula>, where:<itemizedlist>
<listitem><para><formula id="14">$A = F&apos;[f]^*(F&apos;[f]p) = 4\overline{e^{-f}} \mathcal{F}^*\left(\Re\left(\overline{\mathcal{F}(e^{-f})}\mathcal{F}(e^{-f}p)\right)\mathcal{F}(e^{-f})\right)$</formula>;</para>
</listitem><listitem><para><formula id="15">$B = \alpha \Delta p \qquad \text{or} \qquad B = \alpha p$</formula>;</para>
</listitem><listitem><para><formula id="16">$C = \gamma m^2 \Re(p)$</formula>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para><formula id="11">$M$</formula> is saved in <emphasis>prain.Mp</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with image parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prain</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with some data info that was or will be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prof</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for profile info. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="381" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="381" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1a50e7ad0603036289864e9592b1017160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void computeRHSTik</definition>
        <argsstring>(PAR param, PRAINDAT *prain, PROF *prof)</argsstring>
        <name>computeRHSTik</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref> *</type>
          <declname>prain</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <briefdescription>
<para>Computate RHS of the linear system <formula id="5">$Mx = b$</formula> and it&apos;s norm. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="6">$b$</formula> is writting as <formula id="7">$b = A + B + C$</formula>, where:<itemizedlist>
<listitem><para><formula id="8">$A = F&apos;[f]^*(\text{intensity}) = -2\overline{e^{-f}} \mathcal{F}^*(\text{intensity}\times\mathcal{F}(e^{-f}))$</formula>;</para>
</listitem><listitem><para><formula id="9">$B = \alpha \Delta(f_0 - f) \qquad \text{or} \qquad \alpha(f_0 - f)$</formula>;</para>
</listitem><listitem><para><formula id="10">$C = \gamma m \min(0,\Re(f))$</formula>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para><formula id="6">$b$</formula> is saved in <emphasis>prain.ans</emphasis> and it&apos;s norm in <emphasis>prain.rhsnorm</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with image parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prain</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with some data info that was or will be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prof</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for profile info. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="413" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="413" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1a309aa8610b184af433ffa486c218bbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void conjugateGradientTik</definition>
        <argsstring>(PAR param, PRAINDAT *prain, PROF *prof)</argsstring>
        <name>conjugateGradientTik</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref> *</type>
          <declname>prain</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <briefdescription>
<para>Solves the linear system <formula id="5">$Mx = b$</formula>, using conjugate gradient method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with image parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prain</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with some data info that was or will be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prof</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for profile info. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="444" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="444" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1a6ec3713d1edf8c9426202daca15f5cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fresnelpropagation</definition>
        <argsstring>(PAR param, cufftComplex *data, cufftComplex *kernel, cufftComplex *ans, size_t sizex, size_t sizey, size_t sizez)</argsstring>
        <name>fresnelpropagation</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type>cufftComplex *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>cufftComplex *</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>cufftComplex *</type>
          <declname>ans</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizey</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizez</declname>
        </param>
        <briefdescription>
<para>This function computes the fresnel propagation operator: <formula id="4">$\mathscr{F}^{-1}(\mathscr{F}[k]^* \mathscr{F}[\text{data}])$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with image parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ans</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the result of this function operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizex</parametername>
<parametername>sizey</parametername>
<parametername>sizez</parametername>
</parameternamelist>
<parameterdescription>
<para>Data boundary in cuda x, y and z directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="515" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="515" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1ab7b201bb107324ed760787152865bdad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fresnelpropagationConj</definition>
        <argsstring>(PAR param, cufftComplex *data, cufftComplex *kernel, cufftComplex *ans, size_t sizex, size_t sizey, size_t sizez)</argsstring>
        <name>fresnelpropagationConj</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type>cufftComplex *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>cufftComplex *</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>cufftComplex *</type>
          <declname>ans</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizey</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizez</declname>
        </param>
        <briefdescription>
<para>This function computes the conjugate fresnel propagation operator: <formula id="3">$\mathscr{F}^{-1}(\overline{\mathscr{F}[k]}\,^* \mathscr{F}[e^{-f}])$</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with image parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ans</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector containing the result of this function operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizex</parametername>
<parametername>sizey</parametername>
<parametername>sizez</parametername>
</parameternamelist>
<parameterdescription>
<para>Data boundary in cuda x, y and z directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="528" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="528" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1a52939b56be33d9ed5ece7cd328e45e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void computeFresnelKernel</definition>
        <argsstring>(PAR param, PRAINDAT *prain, PROF *prof, size_t sizex, size_t sizey, size_t sizez)</argsstring>
        <name>computeFresnelKernel</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref> *</type>
          <declname>prain</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizey</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizez</declname>
        </param>
        <briefdescription>
<para>Compute the kernel before iterations: computed only once. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with image parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prain</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct with some data info that was or will be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prof</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct for profile info. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizex</parametername>
<parametername>sizey</parametername>
<parametername>sizez</parametername>
</parameternamelist>
<parameterdescription>
<para>Data boundary in cuda x, y and z directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="541" column="6" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="541" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="sscprain_8cu_1ae2567f8f414c410c3cdb8c4eed2ed420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float computeAlpha0</definition>
        <argsstring>(PAR param, PRAINDAT *prain, PROF *prof)</argsstring>
        <name>computeAlpha0</name>
        <param>
          <type><ref refid="prain_8h_1a470d37834c4662d58f989efd0e21db09" kindref="member">PAR</ref></type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref> *</type>
          <declname>prain</declname>
        </param>
        <param>
          <type><ref refid="structProfiling" kindref="compound">PROF</ref> *</type>
          <declname>prof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" line="549" column="7" bodyfile="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu" bodystart="549" bodyend="595"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../inc/include.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../inc/common/logerror.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1a3d2d554269bd29eceed8475f94858b47" kindref="member">CPUprain</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*projections,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_Complex<sp/>*recovery,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_Complex<sp/>*initialGuessN,<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*compact,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*parameters,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*iterations,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*volumesize,<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*devices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndev)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>Maxgpudev;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Variables<sp/>for<sp/>time<sp/>profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>start,<sp/>stop;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>milliseconds;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;start);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;stop);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Multiples<sp/>devices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaGetDeviceCount(&amp;Maxgpudev);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>devices<sp/>input<sp/>are<sp/>larger<sp/>than<sp/>actual<sp/>devices<sp/>on<sp/>GPU,<sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndev;<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(devices[i]<sp/>&lt;<sp/>Maxgpudev<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>device<sp/>number.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(start);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structParameters" kindref="compound">PAR</ref><sp/>param;<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>prof;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a3f37103aaa7ca7a626a04959bfc0b809" kindref="member">set_prain_parameters</ref>(&amp;param,<sp/>parameters,<sp/>iterations,<sp/>volumesize,<sp/>devices);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>Log<sp/>file<sp/>for<sp/>Newton<sp/>and<sp/>CG*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>LogTbegin(</highlight><highlight class="stringliteral">&quot;LogResN&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>log:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>LogTbegin(</highlight><highlight class="stringliteral">&quot;LogResCG&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>log:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>param.subvolume<sp/>=<sp/>(param.<ref refid="structParameters_1abe1aa5e7f516a8ae331a6aaa21abfdfc" kindref="member">Nz</ref><sp/>+<sp/>ndev<sp/>-<sp/>1)<sp/>/<sp/>ndev;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndev<sp/>==<sp/>1){<sp/></highlight><highlight class="comment">/*<sp/>1<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a983dc33b3b6bd82ebfc75619bce997bc" kindref="member">_CPUprain</ref>(param,<sp/>&amp;prof,<sp/>projections,<sp/>recovery,<sp/>initialGuessN,<sp/>compact,<sp/>param.<ref refid="structParameters_1ab9706f98139825fbfb4c2e7fd8abdd9a" kindref="member">devices</ref>[0]);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Launch<sp/>async<sp/>Threads<sp/>for<sp/>each<sp/>device.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Each<sp/>device<sp/>solves<sp/>a<sp/>block<sp/>of<sp/>&apos;param.slice&apos;<sp/>size.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>future<sp/>c++<sp/>async<sp/>launch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::future&lt;void&gt;&gt;<sp/>threads<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndev;<sp/>i++){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(param.subvolume*(i+1)<sp/>&gt;<sp/>param.<ref refid="structParameters_1abe1aa5e7f516a8ae331a6aaa21abfdfc" kindref="member">Nz</ref>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.subvolume<sp/>=<sp/>param.<ref refid="structParameters_1abe1aa5e7f516a8ae331a6aaa21abfdfc" kindref="member">Nz</ref><sp/>-<sp/>param.subvolume*i;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(param.subvolume<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads.push_back(<sp/>std::async(<sp/>std::launch::async,<sp/><ref refid="prain_8h_1a983dc33b3b6bd82ebfc75619bce997bc" kindref="member">_CPUprain</ref>,<sp/>param,<sp/>&amp;prof,<sp/>projections<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*param.subvolume*i,<sp/>recovery<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*param.subvolume*i,<sp/>initialGuessN<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*param.subvolume*i,<sp/>compact<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*param.subvolume*i,<sp/>devices[i]));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log(</highlight><highlight class="stringliteral">&quot;Synchronizing<sp/>all<sp/>threads...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndev;<sp/>i++)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads[i].get();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Record<sp/>Total<sp/>time*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(stop);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventSynchronize(stop);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventElapsedTime(&amp;milliseconds,<sp/>start,<sp/>stop);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>LogT(</highlight><highlight class="stringliteral">&quot;LogResN&quot;</highlight><highlight class="normal">,<sp/>milliseconds*1e-3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceSynchronize();</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1a983dc33b3b6bd82ebfc75619bce997bc" kindref="member">_CPUprain</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*projections,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_Complex<sp/>*recovery,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_Complex<sp/>*initialGuessN,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*compact,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndev)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>GPU<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaSetDevice(ndev))</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bz;<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Plan<sp/>for<sp/>Fourier<sp/>transform<sp/>-<sp/>cufft<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[]<sp/>=<sp/>{(int)param.<ref refid="structParameters_1aea9fb13a195854a7399520b4fe27ed02" kindref="member">Nx</ref>,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)param.<ref refid="structParameters_1a566aab9822535e5633cd4c175d954986" kindref="member">Ny</ref>};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_FFTERROR(cufftPlanMany(&amp;param.<ref refid="structParameters_1a6e4da5b8b1975578eb83f7766f87b978" kindref="member">mplan</ref>,<sp/>2,<sp/>n,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>CUFFT_C2C,<sp/>param.blocksize));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref><sp/>=<sp/>param.blocksize;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>for<sp/>each<sp/>batch<sp/>of<sp/>size<sp/>&apos;batch&apos;<sp/>in<sp/>threads<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bz<sp/>=<sp/>0;<sp/>bz<sp/>&lt;<sp/>param.subvolume;<sp/>bz+=param.blocksize){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(bz<sp/>+<sp/>param.blocksize)<sp/>&gt;<sp/>param.subvolume){</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref><sp/>=<sp/>param.subvolume<sp/>-<sp/>bz;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref><sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;dev<sp/>=<sp/>%d,<sp/>subvolume<sp/>=<sp/>%ld,<sp/>blocksize<sp/>=<sp/>%ld\n&quot;</highlight><highlight class="normal">,ndev,param.subvolume,param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_FFTERROR(cufftPlanMany(&amp;param.<ref refid="structParameters_1a655440251722ee5443cb6248380f64db" kindref="member">mplan2</ref>,<sp/>2,<sp/>n,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>CUFFT_C2C,<sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a6b3de020266bb5542cc72fe36ba00ec1" kindref="member">praincall</ref>(param,<sp/>prof,<sp/>projections<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*bz,<sp/>recovery<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*bz,<sp/>initialGuessN<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*bz,<sp/>compact<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*bz,<sp/>ndev);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_FFTERROR(cufftDestroy(param.<ref refid="structParameters_1a6e4da5b8b1975578eb83f7766f87b978" kindref="member">mplan</ref>));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;dev<sp/>=<sp/>%d,<sp/>subvolume<sp/>=<sp/>%ld,<sp/>blocksize<sp/>=<sp/>%ld\n&quot;</highlight><highlight class="normal">,ndev,param.subvolume,param.blocksize);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a6b3de020266bb5542cc72fe36ba00ec1" kindref="member">praincall</ref>(param,<sp/>prof,<sp/>projections<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*bz,<sp/>recovery<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*bz,<sp/>initialGuessN<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*bz,<sp/>compact<sp/>+<sp/>param.<ref refid="structParameters_1a3fa2b2a41ac4b4aa4118f58f235cf7d7" kindref="member">slice</ref>*bz,<sp/>ndev);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Destroy<sp/>plan<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_FFTERROR(cufftDestroy(param.<ref refid="structParameters_1a6e4da5b8b1975578eb83f7766f87b978" kindref="member">mplan</ref>));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceSynchronize();</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1a6b3de020266bb5542cc72fe36ba00ec1" kindref="member">praincall</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*projections,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_Complex<sp/>*recovery,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_Complex<sp/>*initialGuessN,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*compact,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndev)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>GPU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaSetDevice(ndev));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>start,<sp/>stop;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>milliseconds;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;start);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;stop);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaGetDevice(&amp;gpu);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Declare<sp/>host<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iterationNewton<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex<sp/>=<sp/>param.<ref refid="structParameters_1aea9fb13a195854a7399520b4fe27ed02" kindref="member">Nx</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey<sp/>=<sp/>param.<ref refid="structParameters_1a566aab9822535e5633cd4c175d954986" kindref="member">Ny</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez<sp/>=<sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Function<sp/>Pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*conjugateGradient_ptr)(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*computeRHS_ptr)(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Choosing<sp/>regularization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.regularization<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computeRHS_ptr<sp/>=<sp/>&amp;<ref refid="prain_8h_1ae82c8ee6724dfdec21c49e45a71e3cb7" kindref="member">computeRHSLaplace</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conjugateGradient_ptr<sp/>=<sp/>&amp;<ref refid="prain_8h_1a7da9ddffb985a367999f3789ae7e4eba" kindref="member">conjugateGradientLaplace</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log(</highlight><highlight class="stringliteral">&quot;Using<sp/>Laplace<sp/>Regularization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computeRHS_ptr<sp/>=<sp/>&amp;<ref refid="prain_8h_1a50e7ad0603036289864e9592b1017160" kindref="member">computeRHSTik</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conjugateGradient_ptr<sp/>=<sp/>&amp;<ref refid="prain_8h_1a309aa8610b184af433ffa486c218bbcf" kindref="member">conjugateGradientTik</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log(</highlight><highlight class="stringliteral">&quot;Using<sp/>Tikhonov<sp/>Regularization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>device<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>workspace;<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain<sp/>=<sp/>allocateprain(&amp;workspace,<sp/>param);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>Intensity<sp/>data<sp/>from<sp/>host<sp/>to<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;Idata,<sp/>projections,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyHostToDevice));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;image0,<sp/>initialGuessN,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex),<sp/>cudaMemcpyHostToDevice));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;mask,<sp/>compact,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyHostToDevice));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>Fresnel<sp/>kernels<sp/>to<sp/>use<sp/>in<sp/>computations<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a52939b56be33d9ed5ece7cd328e45e59" kindref="member">computeFresnelKernel</ref>(param,<sp/>prain,<sp/>prof,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.alpha<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.alpha<sp/>=<sp/>computeAlpha0(param,<sp/>prain,<sp/>prof);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.gamma<sp/>==<sp/>-1)<sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.gamma<sp/>=<sp/>param.alpha;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Alpha<sp/>and<sp/>ratio<sp/>=<sp/>%e,<sp/>%e\n&quot;</highlight><highlight class="normal">,param.alpha,<sp/>param.ratio);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;image,<sp/>prain-&gt;image0,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>Log(</highlight><highlight class="stringliteral">&quot;Starting<sp/>Newton<sp/>Iterations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(start);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>newton<sp/>iterations<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((param.stopcriteria<sp/>&gt;<sp/>param.TolN)<sp/>&amp;&amp;<sp/>(iterationNewton<sp/>&lt;<sp/>param.itmaxN)<sp/>){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>f<sp/>in<sp/>propg<sp/>for<sp/>computations<sp/>from<sp/>host<sp/>to<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;prop,<sp/>prain-&gt;image,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1)<sp/>compute<sp/>beerk<sp/>=<sp/>exp(-f)<sp/>and<sp/>it<sp/>conjugate:<sp/>store<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a28e4509435faef2365f827637b942085" kindref="member">beerslaw</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;prop,<sp/>prain-&gt;beer,<sp/>param.ratio,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>2)<sp/>Compute<sp/>propg<sp/>=<sp/>D(beerk)<sp/><sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a6ec3713d1edf8c9426202daca15f5cba" kindref="member">fresnelpropagation</ref>(param,<sp/>prain-&gt;beer,<sp/>prain-&gt;kernel,<sp/>prain-&gt;prop,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3)<sp/>Compute<sp/>intensity<sp/>intensityk<sp/>=<sp/>|D(beerk)|^2<sp/>and<sp/>difference<sp/>intensityk<sp/>=<sp/>(data<sp/>-<sp/>intensity)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a60ac7e4bbb4df7af1e9524c946322b80" kindref="member">CIntensity</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;prop,<sp/>prain-&gt;prop,<sp/>prain-&gt;intensity,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a7718e0af6947aae776b3d1311377fdcc" kindref="member">FSub</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;intensity,<sp/>prain-&gt;Idata,<sp/>sizex,<sp/>sizey,<sp/>sizez);<sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>criteria<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;norm,0,<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a665de576d4b44afa6d3ec6d18149cb6f" kindref="member">FInnerProd</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;intensity,<sp/>prain-&gt;intensity,<sp/>prain-&gt;norm,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.max<sp/>=<sp/>cublasIsamax((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)sizez,<sp/>prain-&gt;norm,<sp/>1);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(&amp;param.stopcriteria,<sp/>prain-&gt;norm+param.max-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterationNewton<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.norm_init<sp/>=<sp/>param.stopcriteria<sp/>+<sp/>1e-15;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.stopcriteria<sp/>=<sp/>param.stopcriteria<sp/>/<sp/>param.norm_init;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>RHS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computeRHS_ptr(param,<sp/>prain,<sp/>prof);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>Gradient<sp/>Conjugate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conjugateGradient_ptr(param,<sp/>prain,<sp/>prof);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>alpha<sp/>and<sp/>gamma<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.alpha<sp/>*=<sp/>(2/3);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//f<sp/>=<sp/>f<sp/>+<sp/>sol_of_CG;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a8ea4f7a7bcc1746db2db17e1462b87b6" kindref="member">CSum</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;image,<sp/>prain-&gt;ans,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterationNewton++;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(stop);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventSynchronize(stop);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventElapsedTime(&amp;milliseconds,<sp/>start,<sp/>stop);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(recovery,<sp/>prain-&gt;image,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_Complex),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>freeprain(prain);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>Log(</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>Newton<sp/>Iterations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>LogT(</highlight><highlight class="stringliteral">&quot;LogResN&quot;</highlight><highlight class="normal">,<sp/>iterationNewton<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>milliseconds*1e-3<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>param.stopcriteria<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceSynchronize();</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1ac8a2c2f22654a6c456274b15688ad5db" kindref="member">MatrixOperatorLaplace</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>Mp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex<sp/>=<sp/>param.<ref refid="structParameters_1aea9fb13a195854a7399520b4fe27ed02" kindref="member">Nx</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey<sp/>=<sp/>param.<ref refid="structParameters_1a566aab9822535e5633cd4c175d954986" kindref="member">Ny</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez<sp/>=<sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>A:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a063528102c250eaf517c817fe3bfe143" kindref="member">CConvolve</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;p,<sp/>prain-&gt;beer,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a6ec3713d1edf8c9426202daca15f5cba" kindref="member">fresnelpropagation</ref>(param,<sp/>prain-&gt;temp,<sp/>prain-&gt;kernel,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a2fc56d80f7b074c1681e84f65f4dc36c" kindref="member">Cabsolute2</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;prop,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a4571d6a2c0b8419a7b09b8a48fa5ac17" kindref="member">CRealPart</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a5fec253ce36b4527d9b0a7fd5017bbd7" kindref="member">CMultComplexAmplitude</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;prop,<sp/>prain-&gt;Mp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1ab7b201bb107324ed760787152865bdad" kindref="member">fresnelpropagationConj</ref>(param,<sp/>prain-&gt;Mp,<sp/>prain-&gt;kernel,<sp/>prain-&gt;Mp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1aac1153e191282d4cc53272e55ea0f46d" kindref="member">OperatorA</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;Mp,<sp/>prain-&gt;beer,<sp/>prain-&gt;Mp,<sp/>4.0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>C:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac4f3ca040bc526adc26549e33de0515d" kindref="member">minimum_regularization</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;p,<sp/>prain-&gt;image,<sp/>prain-&gt;Mp,<sp/>prain-&gt;Mp,<sp/>param.gamma,<sp/>0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>B:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;temp,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a498ca34fdaaf50c2598b846b84a030e5" kindref="member">CLaplacemat</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;p,<sp/>prain-&gt;temp,<sp/>param.alpha,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sum<sp/>all<sp/>Parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a8ea4f7a7bcc1746db2db17e1462b87b6" kindref="member">CSum</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;Mp,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compact<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ada8b6f04bf75f95523b6a210b82bdc8f" kindref="member">CMultAmplitude</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;mask,<sp/>prain-&gt;Mp,<sp/>prain-&gt;Mp,<sp/>sizex,<sp/>sizey,<sp/>sizez);<sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1ae82c8ee6724dfdec21c49e45a71e3cb7" kindref="member">computeRHSLaplace</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex<sp/>=<sp/>param.<ref refid="structParameters_1aea9fb13a195854a7399520b4fe27ed02" kindref="member">Nx</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey<sp/>=<sp/>param.<ref refid="structParameters_1a566aab9822535e5633cd4c175d954986" kindref="member">Ny</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez<sp/>=<sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;ans,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;temp,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>A:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ada8b6f04bf75f95523b6a210b82bdc8f" kindref="member">CMultAmplitude</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;intensity,<sp/>prain-&gt;prop,<sp/>prain-&gt;ans,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1ab7b201bb107324ed760787152865bdad" kindref="member">fresnelpropagationConj</ref>(param,<sp/>prain-&gt;ans,<sp/>prain-&gt;kernel,<sp/>prain-&gt;ans,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1aac1153e191282d4cc53272e55ea0f46d" kindref="member">OperatorA</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;ans,<sp/>prain-&gt;beer,<sp/>prain-&gt;ans,<sp/>-2.0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac4f3ca040bc526adc26549e33de0515d" kindref="member">minimum_regularization</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;image,<sp/>prain-&gt;ans,<sp/>prain-&gt;ans,<sp/>param.gamma,<sp/>1,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>B:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a0fcea4e7a9854adf81d75275df744b81" kindref="member">CLaplacerhs</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;image0,<sp/>prain-&gt;image,<sp/>prain-&gt;temp,<sp/>param.alpha,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sum<sp/>all<sp/>Parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a8ea4f7a7bcc1746db2db17e1462b87b6" kindref="member">CSum</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;ans,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compact<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ada8b6f04bf75f95523b6a210b82bdc8f" kindref="member">CMultAmplitude</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;mask,<sp/>prain-&gt;ans,<sp/>prain-&gt;ans,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>&lt;b,b&gt;<sp/>-&gt;<sp/>store<sp/>in<sp/>rhsnorm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;rhsnorm,0,sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac9dc46e31d6652af059364a3a7801bf5" kindref="member">CInnerProd</ref>&lt;&lt;&lt;param.Grd,param.BT,<sp/>param.BT.x*param.BT.y*param.BT.z*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)&gt;&gt;&gt;(prain-&gt;ans,<sp/>prain-&gt;ans,<sp/>prain-&gt;rhsnorm,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1a7da9ddffb985a367999f3789ae7e4eba" kindref="member">conjugateGradientLaplace</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceSynchronize();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>Log(</highlight><highlight class="stringliteral">&quot;Starting<sp/>CG<sp/>Iterations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>start,<sp/>stop;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;start);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;stop);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex<sp/>=<sp/>param.<ref refid="structParameters_1aea9fb13a195854a7399520b4fe27ed02" kindref="member">Nx</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey<sp/>=<sp/>param.<ref refid="structParameters_1a566aab9822535e5633cd4c175d954986" kindref="member">Ny</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez<sp/>=<sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iterationCG<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>normrhs;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>param.max<sp/>=<sp/>cublasIsamax((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)sizez,<sp/>prain-&gt;rhsnorm,<sp/>1);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;p,<sp/>prain-&gt;ans,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;r,<sp/>prain-&gt;ans,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>initial<sp/>value<sp/>for<sp/>GC<sp/>ans<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;ans,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;beta,<sp/>prain-&gt;rhsnorm,<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(&amp;normrhs,prain-&gt;rhsnorm+param.max-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>normrhs<sp/>=<sp/><sp/>1.0<sp/>/<sp/>(normrhs<sp/>+<sp/>1e-15);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>of<sp/>CG<sp/>iterations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(start);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(param.stopcriteriaCG<sp/>&gt;<sp/>param.TolCG)<sp/>&amp;&amp;<sp/>(iterationCG<sp/>&lt;<sp/>param.itmaxCG)<sp/>){</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>criteria<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.max<sp/>=<sp/>cublasIsamax((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)sizez,<sp/>prain-&gt;beta,<sp/>1);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MAXCG22<sp/>=<sp/>%d\n&quot;,param.max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(&amp;param.stopcriteriaCG,<sp/>prain-&gt;beta+param.max-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.stopcriteriaCG<sp/>=<sp/>param.stopcriteriaCG<sp/>*<sp/>normrhs;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>Mp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="prain_8h_1ac8a2c2f22654a6c456274b15688ad5db" kindref="member">MatrixOperatorLaplace</ref>(param,<sp/>prain,<sp/>prof);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;norm,0,<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac9dc46e31d6652af059364a3a7801bf5" kindref="member">CInnerProd</ref>&lt;&lt;&lt;param.Grd,param.BT,<sp/>param.BT.x*param.BT.y*param.BT.z*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)&gt;&gt;&gt;(prain-&gt;p,<sp/>prain-&gt;Mp,<sp/>prain-&gt;norm,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>lambda<sp/>=<sp/>beta<sp/>/<sp/>norm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FDivZ&lt;&lt;&lt;1,sizez&gt;&gt;&gt;(prain-&gt;beta,prain-&gt;norm,prain-&gt;lambda,sizez);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1acd3388a8a27c9c4268dc0c3e8e0ada5c" kindref="member">CAddScalar</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;lambda,<sp/>prain-&gt;ans,<sp/>prain-&gt;p,<sp/>prain-&gt;ans,<sp/>0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1acd3388a8a27c9c4268dc0c3e8e0ada5c" kindref="member">CAddScalar</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;lambda,<sp/>prain-&gt;r,<sp/>prain-&gt;Mp,<sp/>prain-&gt;r,<sp/>1,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;norm,0,sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac9dc46e31d6652af059364a3a7801bf5" kindref="member">CInnerProd</ref>&lt;&lt;&lt;param.Grd,param.BT,<sp/>param.BT.x*param.BT.y*param.BT.z*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)&gt;&gt;&gt;(prain-&gt;r,<sp/>prain-&gt;r,<sp/>prain-&gt;norm,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lambda<sp/>=<sp/>norm<sp/>/<sp/>beta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FDivZ&lt;&lt;&lt;1,sizez&gt;&gt;&gt;(prain-&gt;norm,prain-&gt;beta,prain-&gt;lambda,sizez);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1acd3388a8a27c9c4268dc0c3e8e0ada5c" kindref="member">CAddScalar</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;lambda,<sp/>prain-&gt;r,<sp/>prain-&gt;p,<sp/>prain-&gt;p,<sp/>0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//beta<sp/>=<sp/>rho;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;beta,<sp/>prain-&gt;norm,<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterationCG++;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>milliseconds;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(stop);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventSynchronize(stop);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventElapsedTime(&amp;milliseconds,<sp/>start,<sp/>stop);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>LogT(</highlight><highlight class="stringliteral">&quot;LogResCG&quot;</highlight><highlight class="normal">,<sp/><sp/>iterationCG<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>milliseconds*1e-3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>param.stopcriteriaCG<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1abe3c86803c3f8cf810fb7a359aa5e0c4" kindref="member">MatrixOperatorTik</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>Mp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex<sp/>=<sp/>param.<ref refid="structParameters_1aea9fb13a195854a7399520b4fe27ed02" kindref="member">Nx</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey<sp/>=<sp/>param.<ref refid="structParameters_1a566aab9822535e5633cd4c175d954986" kindref="member">Ny</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez<sp/>=<sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>A:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a063528102c250eaf517c817fe3bfe143" kindref="member">CConvolve</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;p,<sp/>prain-&gt;beer,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a6ec3713d1edf8c9426202daca15f5cba" kindref="member">fresnelpropagation</ref>(param,<sp/>prain-&gt;temp,<sp/>prain-&gt;kernel,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a2fc56d80f7b074c1681e84f65f4dc36c" kindref="member">Cabsolute2</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;prop,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a4571d6a2c0b8419a7b09b8a48fa5ac17" kindref="member">CRealPart</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a5fec253ce36b4527d9b0a7fd5017bbd7" kindref="member">CMultComplexAmplitude</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;prop,<sp/>prain-&gt;Mp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1ab7b201bb107324ed760787152865bdad" kindref="member">fresnelpropagationConj</ref>(param,<sp/>prain-&gt;Mp,<sp/>prain-&gt;kernel,<sp/>prain-&gt;Mp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assynchronous<sp/>operations<sp/>?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1aac1153e191282d4cc53272e55ea0f46d" kindref="member">OperatorA</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;Mp,<sp/>prain-&gt;beer,<sp/>prain-&gt;Mp,<sp/>4.0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>C:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac4f3ca040bc526adc26549e33de0515d" kindref="member">minimum_regularization</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;p,<sp/>prain-&gt;image,<sp/>prain-&gt;Mp,<sp/>prain-&gt;Mp,<sp/>param.gamma,<sp/>0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>B:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;temp,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ada58bf5b67fb2a884a6959b29e53b5f4" kindref="member">CDifference</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;p,<sp/>prain-&gt;temp,<sp/>prain-&gt;temp,<sp/>param.alpha,<sp/>1.0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sum<sp/>all<sp/>Parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a8ea4f7a7bcc1746db2db17e1462b87b6" kindref="member">CSum</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;Mp,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compact<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ada8b6f04bf75f95523b6a210b82bdc8f" kindref="member">CMultAmplitude</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;mask,<sp/>prain-&gt;Mp,<sp/>prain-&gt;Mp,<sp/>sizex,<sp/>sizey,<sp/>sizez);<sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1a50e7ad0603036289864e9592b1017160" kindref="member">computeRHSTik</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex<sp/>=<sp/>param.<ref refid="structParameters_1aea9fb13a195854a7399520b4fe27ed02" kindref="member">Nx</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey<sp/>=<sp/>param.<ref refid="structParameters_1a566aab9822535e5633cd4c175d954986" kindref="member">Ny</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez<sp/>=<sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;ans,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;temp,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>A:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ada8b6f04bf75f95523b6a210b82bdc8f" kindref="member">CMultAmplitude</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;intensity,<sp/>prain-&gt;prop,<sp/>prain-&gt;ans,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1ab7b201bb107324ed760787152865bdad" kindref="member">fresnelpropagationConj</ref>(param,<sp/>prain-&gt;ans,<sp/>prain-&gt;kernel,<sp/>prain-&gt;ans,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1aac1153e191282d4cc53272e55ea0f46d" kindref="member">OperatorA</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;ans,<sp/>prain-&gt;beer,<sp/>prain-&gt;ans,<sp/>-2.0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac4f3ca040bc526adc26549e33de0515d" kindref="member">minimum_regularization</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;ans,<sp/>prain-&gt;image,<sp/>prain-&gt;ans,<sp/>prain-&gt;ans,<sp/>param.gamma,<sp/>1,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PART<sp/>B:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ada58bf5b67fb2a884a6959b29e53b5f4" kindref="member">CDifference</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;image0,<sp/>prain-&gt;image,<sp/>prain-&gt;temp,<sp/>param.alpha,<sp/>1.0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sum<sp/>all<sp/>Parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a8ea4f7a7bcc1746db2db17e1462b87b6" kindref="member">CSum</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;ans,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compact<sp/>support<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ada8b6f04bf75f95523b6a210b82bdc8f" kindref="member">CMultAmplitude</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;mask,<sp/>prain-&gt;ans,<sp/>prain-&gt;ans,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>&lt;b,b&gt;<sp/>-&gt;<sp/>store<sp/>in<sp/>rhsnorm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;rhsnorm,0,sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac9dc46e31d6652af059364a3a7801bf5" kindref="member">CInnerProd</ref>&lt;&lt;&lt;param.Grd,param.BT,<sp/>param.BT.x*param.BT.y*param.BT.z*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)&gt;&gt;&gt;(prain-&gt;ans,<sp/>prain-&gt;ans,<sp/>prain-&gt;rhsnorm,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1a309aa8610b184af433ffa486c218bbcf" kindref="member">conjugateGradientTik</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceSynchronize();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>Log(</highlight><highlight class="stringliteral">&quot;Starting<sp/>CG<sp/>Iterations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>start,<sp/>stop;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;start);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;stop);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex<sp/>=<sp/>param.<ref refid="structParameters_1aea9fb13a195854a7399520b4fe27ed02" kindref="member">Nx</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey<sp/>=<sp/>param.<ref refid="structParameters_1a566aab9822535e5633cd4c175d954986" kindref="member">Ny</ref>;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez<sp/>=<sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iterationCG<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>normrhs;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>param.max<sp/>=<sp/>cublasIsamax((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)sizez,<sp/>prain-&gt;rhsnorm,<sp/>1);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MAXCG22<sp/>=<sp/>%d\n&quot;,param.max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;p,<sp/>prain-&gt;ans,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;r,<sp/>prain-&gt;ans,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>initial<sp/>value<sp/>for<sp/>GC<sp/>ans<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;ans,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;beta,<sp/>prain-&gt;rhsnorm,<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(&amp;normrhs,prain-&gt;rhsnorm+param.max-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>normrhs<sp/>=<sp/>1.0<sp/>/<sp/>(normrhs<sp/>+<sp/>1e-15);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>of<sp/>CG<sp/>iterations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(start);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(param.stopcriteriaCG<sp/>&gt;<sp/>param.TolCG)<sp/>&amp;&amp;<sp/>(iterationCG<sp/>&lt;<sp/>param.itmaxCG)<sp/>){</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>criteria<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.max<sp/>=<sp/>cublasIsamax((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)sizez,<sp/>prain-&gt;beta,<sp/>1);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(&amp;param.stopcriteriaCG,<sp/>prain-&gt;beta+param.max-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.stopcriteriaCG<sp/>=<sp/>param.stopcriteriaCG<sp/>*<sp/>normrhs;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>Mp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="prain_8h_1abe3c86803c3f8cf810fb7a359aa5e0c4" kindref="member">MatrixOperatorTik</ref>(param,<sp/>prain,<sp/>prof);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;norm,0,<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac9dc46e31d6652af059364a3a7801bf5" kindref="member">CInnerProd</ref>&lt;&lt;&lt;param.Grd,param.BT,<sp/>param.BT.x*param.BT.y*param.BT.z*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)&gt;&gt;&gt;(prain-&gt;p,<sp/>prain-&gt;Mp,<sp/>prain-&gt;norm,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>lambda<sp/>=<sp/>beta<sp/>/<sp/>norm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FDivZ&lt;&lt;&lt;1,sizez&gt;&gt;&gt;(prain-&gt;beta,prain-&gt;norm,prain-&gt;lambda,sizez);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1acd3388a8a27c9c4268dc0c3e8e0ada5c" kindref="member">CAddScalar</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;lambda,<sp/>prain-&gt;ans,<sp/>prain-&gt;p,prain-&gt;ans,<sp/>0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1acd3388a8a27c9c4268dc0c3e8e0ada5c" kindref="member">CAddScalar</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;lambda,<sp/>prain-&gt;r,<sp/>prain-&gt;Mp,<sp/>prain-&gt;r,<sp/>1,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;norm,0,sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac9dc46e31d6652af059364a3a7801bf5" kindref="member">CInnerProd</ref>&lt;&lt;&lt;param.Grd,param.BT,<sp/>param.BT.x*param.BT.y*param.BT.z*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)&gt;&gt;&gt;(prain-&gt;r,<sp/>prain-&gt;r,<sp/>prain-&gt;norm,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lambda<sp/>=<sp/>norm<sp/>/<sp/>beta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FDivZ&lt;&lt;&lt;1,sizez&gt;&gt;&gt;(prain-&gt;norm,prain-&gt;beta,prain-&gt;lambda,sizez);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1acd3388a8a27c9c4268dc0c3e8e0ada5c" kindref="member">CAddScalar</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;lambda,<sp/>prain-&gt;r,<sp/>prain-&gt;p,<sp/>prain-&gt;p,<sp/>0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//beta<sp/>=<sp/>rho;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;beta,<sp/>prain-&gt;norm,<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterationCG++;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>milliseconds;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(stop);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventSynchronize(stop);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventElapsedTime(&amp;milliseconds,<sp/>start,<sp/>stop);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>LogT(</highlight><highlight class="stringliteral">&quot;LogResCG&quot;</highlight><highlight class="normal">,<sp/><sp/>iterationCG<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>milliseconds*1e-3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>param.stopcriteria<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1a6ec3713d1edf8c9426202daca15f5cba" kindref="member">fresnelpropagation</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/>cufftComplex<sp/>*data,<sp/>cufftComplex<sp/>*kernel,<sp/>cufftComplex<sp/>*ans,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1)<sp/>Fourier<sp/>Transform<sp/>of<sp/>data<sp/>F(data)<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>2)<sp/>Multiplication<sp/>of<sp/>F(data)<sp/>and<sp/>F(k)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3)<sp/>Inverse<sp/>Fourier<sp/>transform<sp/>of<sp/>[F(data)<sp/>*<sp/>F(k)]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>4)<sp/>Normalization<sp/>of<sp/>inverse<sp/>FFT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_FFTERROR(cufftExecC2C(param.<ref refid="structParameters_1a6e4da5b8b1975578eb83f7766f87b978" kindref="member">mplan</ref>,<sp/>data,<sp/>ans,<sp/>CUFFT_FORWARD));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a063528102c250eaf517c817fe3bfe143" kindref="member">CConvolve</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(ans,kernel,ans,sizex,sizey,sizez);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_FFTERROR(cufftExecC2C(param.<ref refid="structParameters_1a6e4da5b8b1975578eb83f7766f87b978" kindref="member">mplan</ref>,<sp/>ans,<sp/>ans,<sp/>CUFFT_INVERSE));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a736224b0bc11ce0e5e5cbf69ba9723d2" kindref="member">fftNormalize</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(ans,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1ab7b201bb107324ed760787152865bdad" kindref="member">fresnelpropagationConj</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/>cufftComplex<sp/>*data,<sp/>cufftComplex<sp/>*kernel,<sp/>cufftComplex<sp/>*ans,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1)<sp/>Fourier<sp/>Transform<sp/>of<sp/>data<sp/>F(data)<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>2)<sp/>Multiplication<sp/>of<sp/>F(data)<sp/>and<sp/>CF(k)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3)<sp/>Inverse<sp/>Fourier<sp/>transform<sp/>of<sp/>[F(data)<sp/>*<sp/>CF(k)]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>4)<sp/>Normalization<sp/>of<sp/>inverse<sp/>FFT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_FFTERROR(cufftExecC2C(param.<ref refid="structParameters_1a6e4da5b8b1975578eb83f7766f87b978" kindref="member">mplan</ref>,<sp/>data,<sp/>ans,<sp/>CUFFT_FORWARD));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a2fc56d80f7b074c1681e84f65f4dc36c" kindref="member">Cabsolute2</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(ans,kernel,ans,sizex,sizey,sizez);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_FFTERROR(cufftExecC2C(param.<ref refid="structParameters_1a6e4da5b8b1975578eb83f7766f87b978" kindref="member">mplan</ref>,<sp/>ans,<sp/>ans,<sp/>CUFFT_INVERSE));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a736224b0bc11ce0e5e5cbf69ba9723d2" kindref="member">fftNormalize</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(ans,<sp/>sizex,<sp/>sizey,<sp/>sizez);<sp/></highlight></codeline>
<codeline lineno="539"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="prain_8h_1a52939b56be33d9ed5ece7cd328e45e59" kindref="member">computeFresnelKernel</ref>(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez)</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.a)<sp/>Fresnel<sp/>Fourier<sp/>kernel<sp/>F(k)<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.b)<sp/>Shift<sp/>of<sp/>kernel<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a3dad3f55a1895c9048c29f51eb52a855" kindref="member">FourierFresnelKernel</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;kernel,<sp/>param.Fx,<sp/>param.Fy,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a4e017977cae93b3b3b14ea7bb9de9386" kindref="member">fftshiftKernel</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;kernel,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>computeAlpha0(<ref refid="structParameters" kindref="compound">PAR</ref><sp/>param,<sp/><ref refid="structPRAINData" kindref="compound">PRAINDAT</ref><sp/>*prain,<sp/><ref refid="structProfiling" kindref="compound">PROF</ref><sp/>*prof)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>Mp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizex<sp/>=<sp/>param.<ref refid="structParameters_1aea9fb13a195854a7399520b4fe27ed02" kindref="member">Nx</ref>;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizey<sp/>=<sp/>param.<ref refid="structParameters_1a566aab9822535e5633cd4c175d954986" kindref="member">Ny</ref>;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizez<sp/>=<sp/>param.<ref refid="structParameters_1a887645bc370c242e3bdc03d4188b0517" kindref="member">zblock</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha,<sp/>alpha0;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(prain-&gt;beer,<sp/>prain-&gt;image0,<sp/>sizex<sp/>*<sp/>sizey<sp/>*<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex),<sp/>cudaMemcpyHostToDevice));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>beer<sp/>de<sp/>f0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a28e4509435faef2365f827637b942085" kindref="member">beerslaw</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;beer,<sp/>prain-&gt;beer,<sp/>param.ratio,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a6ec3713d1edf8c9426202daca15f5cba" kindref="member">fresnelpropagation</ref>(param,<sp/>prain-&gt;beer,<sp/>prain-&gt;kernel,<sp/>prain-&gt;prop,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Parte<sp/>1<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ada8b6f04bf75f95523b6a210b82bdc8f" kindref="member">CMultAmplitude</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;Idata,<sp/>prain-&gt;prop,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1ab7b201bb107324ed760787152865bdad" kindref="member">fresnelpropagationConj</ref>(param,<sp/>prain-&gt;temp,<sp/>prain-&gt;kernel,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>norm-2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;norm,0,<sp/>sizez<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac9dc46e31d6652af059364a3a7801bf5" kindref="member">CInnerProd</ref>&lt;&lt;&lt;param.Grd,param.BT,<sp/>param.BT.x*param.BT.y*param.BT.z*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;temp,<sp/>prain-&gt;norm,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>param.max<sp/>=<sp/>cublasIsamax((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)sizez,<sp/>prain-&gt;norm,<sp/>1);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(&amp;alpha,<sp/>prain-&gt;norm+param.max-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Part<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a063528102c250eaf517c817fe3bfe143" kindref="member">CConvolve</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;beer,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prain_8h_1a6ec3713d1edf8c9426202daca15f5cba" kindref="member">fresnelpropagation</ref>(param,<sp/>prain-&gt;temp,<sp/>prain-&gt;kernel,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a2fc56d80f7b074c1681e84f65f4dc36c" kindref="member">Cabsolute2</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;prop,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1a4571d6a2c0b8419a7b09b8a48fa5ac17" kindref="member">CRealPart</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;temp,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1aac1153e191282d4cc53272e55ea0f46d" kindref="member">OperatorA</ref>&lt;&lt;&lt;param.Grd,param.BT&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;beer,<sp/>prain-&gt;temp,<sp/>4.0,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;norm,0,sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="kernelfunctions_8cu_1ac9dc46e31d6652af059364a3a7801bf5" kindref="member">CInnerProd</ref>&lt;&lt;&lt;param.Grd,param.BT,<sp/>param.BT.x*param.BT.y*param.BT.z*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)&gt;&gt;&gt;(prain-&gt;temp,<sp/>prain-&gt;temp,<sp/>prain-&gt;norm,<sp/>sizex,<sp/>sizey,<sp/>sizez);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>param.max<sp/>=<sp/>cublasIsamax((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)sizez,<sp/>prain-&gt;norm,<sp/>1);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemcpy(&amp;alpha0,<sp/>prain-&gt;norm+param.max-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;temp,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;beer,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;prop,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cufftComplex)));</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;prop,0,sizex*sizey*sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE_ERROR(cudaMemset(prain-&gt;norm,0,sizez*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha0<sp/>=<sp/>alpha0<sp/>/<sp/>alpha;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alpha0;</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/eduardo.miqueles/Desktop/ssc-doc/ssc-prain/cuda/src/sscprain.cu"/>
  </compounddef>
</doxygen>
